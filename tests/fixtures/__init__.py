# Common test helpers
from .common import (
    assert_error_response,
    assert_handles_docker_failure,
    assert_model_info_response,
    assert_paginated_response,
    assert_tool_response_valid,
    create_field_info,
    create_mock_odoo_model,
    create_mock_registry,
    create_odoo_response,
)

# Docker helpers
from .docker import (
    create_docker_manager_with_get_container,
    create_mock_handle_operation_success,
    create_mock_handle_operation_with_error_handling,
    create_mock_handle_operation_with_result,
    create_successful_container_mock,
    get_expected_container_names,
    get_expected_database_name,
    get_test_config,
    run_mcp_server_test,
    setup_docker_manager_mock,
)

# Mock utilities
from .mocks import (
    MockEnv,
    MockFileSystemContext,
    create_exists_side_effect_for_module_structure,
    create_mock_env_with_fields,
    create_mock_handle_operation,
    create_mock_model,
    create_mock_record,
    create_mock_user,
    mock_file_system,
    setup_mock_odoo_env_for_permissions,
)

# Odoo fixtures - these are pytest fixtures, need special handling
from .odoo import (
    MockDockerRun,
    container_running,
    docker_available,
    docker_error_responses,
    enhanced_mock_odoo_env,
    mock_docker_run,
    mock_field_data,
    mock_odoo_models,
    mock_product_template_data,
    mock_res_partner_data,
    real_odoo_env_if_available,
)

# Type definitions
from .types import (
    ConcreteModelMock,
    MockCompletedProcess,
    MockCursor,
    MockEnvFixture,
    MockEnvironment,
    MockField,
    MockFieldFixture,
    MockModel,
    MockOdooEnvironment,
    MockOdooModel,
    MockPath,
    MockRecord,
    MockRecordset,
    MockRegistry,
    MockRegistryFixture,
    MockSubprocessRun,
    PytestConfig,
)

__all__ = [
    # Common helpers
    "assert_error_response",
    "assert_handles_docker_failure",
    "assert_model_info_response",
    "assert_paginated_response",
    "assert_tool_response_valid",
    "create_field_info",
    "create_mock_odoo_model",
    "create_mock_registry",
    "create_odoo_response",
    # Docker helpers
    "create_docker_manager_with_get_container",
    "create_mock_handle_operation_success",
    "create_mock_handle_operation_with_error_handling",
    "create_mock_handle_operation_with_result",
    "create_successful_container_mock",
    "get_expected_container_names",
    "get_expected_database_name",
    "get_test_config",
    "run_mcp_server_test",
    "setup_docker_manager_mock",
    # Mock utilities
    "MockEnv",
    "MockFileSystemContext",
    "create_exists_side_effect_for_module_structure",
    "create_mock_env_with_fields",
    "create_mock_handle_operation",
    "create_mock_model",
    "create_mock_record",
    "create_mock_user",
    "mock_file_system",
    "setup_mock_odoo_env_for_permissions",
    # Odoo fixtures
    "MockDockerRun",
    "container_running",
    "docker_available",
    "docker_error_responses",
    "enhanced_mock_odoo_env",
    "mock_docker_run",
    "mock_field_data",
    "mock_odoo_models",
    "mock_product_template_data",
    "mock_res_partner_data",
    "real_odoo_env_if_available",
    # Type definitions
    "ConcreteModelMock",
    "MockCompletedProcess",
    "MockCursor",
    "MockEnvironment",
    "MockEnvFixture",
    "MockField",
    "MockFieldFixture",
    "MockModel",
    "MockOdooEnvironment",
    "MockOdooModel",
    "MockPath",
    "MockRecord",
    "MockRecordset",
    "MockRegistry",
    "MockRegistryFixture",
    "MockSubprocessRun",
    "PytestConfig",
]
